knitr::opts_chunk$set(echo = TRUE)
library(heemod)
library(purrr)
library(dplyr)
# age-dependent probability of death, TB and QoL weighting
pdeath_QoL <-
read.csv("data/pdeath_QoL.csv")
head(pdeath_QoL)
# probabilistic realisations of starting state probabilities
load(file = "data/init_states.RData")
head(init_states)
param <- define_parameters(
age_init = 34,                   # starting age
age = age_init + markov_cycle,   # increment age annually
# transition probabilities
pReact_comp = 0.0006779,         # TB after completed LTBI treatment
pReact_incomp = 0.0015301,       # TB after LTBI treatment dropout
pReact = 0.0019369,              # TB after no treatment
TB_cost = 4925.76,               # cost of TB treatment (Â£)
d = 0.035,                       # annual discount factor
# match prob death to age
pdeath = look_up(data = pdeath_QoL,
value = "pDeath",
age = age),
pdeathTB = look_up(data = pdeath_QoL,
value = "pDeath_TB",
age = age),
# match QoL weight to age
QoL = look_up(data = pdeath_QoL,
value = "QOL_weight",
age = age)
)
mat_trans <- define_transition(
state_names = c(
"noLTBI",
"completeTx",
"incompleteTx",
"noTx",
"activeTB",
"dead"
),
# from-to probability matrix
# C represent complements
C, 0, 0, 0, 0,             pdeath,
0, C, 0, 0, pReact_comp,   pdeath,
0, 0, C, 0, pReact_incomp, pdeath,
0, 0, 0, C, pReact,        pdeath,
C, 0, 0, 0, 0,             pdeathTB,
0, 0, 0, 0, 0,             1
)
noLTBI <- define_state(
cost = 0,
utility = discount(QoL, d, first = TRUE)
)
completeTx <- define_state(
cost = 0,
utility = discount(QoL, d, first = TRUE)
)
incompleteTx <- define_state(
cost = 0,
utility = discount(QoL, d, first = TRUE)
)
noTx <- define_state(
cost = 0,
utility = discount(QoL, d, first = TRUE)
)
activeTB <- define_state(
cost = discount(TB_cost, d, first = TRUE),
utility = discount(QoL - 0.15, d, first = TRUE)
)
dead <- define_state(
cost = 0,
utility = 0
)
strat_6mo <- define_strategy(
transition = mat_trans,
noLTBI = noLTBI,
completeTx = completeTx,
incompleteTx = incompleteTx,
noTx = noTx,
activeTB = activeTB,
dead = dead
)
init_states <- select(.data = init_states,
noLTBI,
completeTx,
incompleteTx,
noTx)
init_states <- data.frame(init_states, activeTB = 0, dead = 0)
res_mod <-
run_model(
init = 1000 * init_states[1, ], # initial population sizes
method = "end",
strat_6mo,
parameters = param,
cycles = 66,                    # number of time steps
cost = cost,
effect = utility
)
res_mod <- list()
for (i in 1:nrow(init_states)) {
res_mod[[i]] <-
run_model(
# init = c(674.0588764, # hard-code values
#          168.0253748,
#          42.42724895,
#          115.4884998,
#          0,0),
init = 1000 * init_states[i, ],
method = "end",
strat_6mo,
parameters = param,
cycles = 66,
cost = cost,
effect = utility
)
}
res_mod[[1]]
get_counts(res_mod[[1]]) %>% head()
get_values(res_mod[[1]]) %>% head()
get_counts(res_mod[[1]]) %>% head()
get_values(res_mod[[1]]) %>% head()
xx <- map(res_mod, get_count)
xx <- map(res_mod, get_counts)
View(xx)
xx <- map(res_mod, get_values)
View(xx)
xx <- map_df(res_mod, get_counts)
View(xx)
yy <- do.call(rbind(, xx))
yy <- do.call(rbind, xx)
View(yy)
head(yy)
res_mod <- list()
for (i in 1:4){#nrow(init_states)) {
res_mod[[i]] <-
run_model(
# init = c(674.0588764, # hard-code values
#          168.0253748,
#          42.42724895,
#          115.4884998,
#          0,0),
init = 1000 * init_states[i, ],
method = "end",
strat_6mo,
parameters = param,
cycles = 66,
cost = cost,
effect = utility
)
}
get_counts(res_mod[[1]]) %>% head()
get_values(res_mod[[1]]) %>% head()
xx <- map(res_mod, get_counts)
yy <- do.call(rbind, xx)
yy
View(yy)
names(xx) <- as.character(1:4)
xx
yy <- do.call(rbind, xx)
View(yy)
View(yy)
View(yy)
xx <- map(res_mod, get_counts)
yy <- do.call(rbind, xx)
View(yy)
names(xx) <- as.character(1:4)
yy <- do.call(rbind, xx)
yy$id <- rownames(yy)
View(yy)
xx <- map(res_mod, get_values)
names(xx) <- as.character(1:4)
yy <- do.call(rbind, xx)
yy$id <- rownames(yy)
View(yy)
xx <- map(res_mod, get_counts)
names(xx) <- as.character(1:4)
yy <- do.call(rbind, xx)
yy$id <- rownames(yy)
View(yy)
xx <- map(res_mod, get_counts)
names(xx) <- as.character(1:4)
out_counts <- do.call(rbind, xx)
out_counts$id <- rownames(out_counts)
xx <- map(res_mod, get_values)
names(xx) <- as.character(1:4)
out_values <- do.call(rbind, xx)
out_values$id <- rownames(out_values)
write.csv(out_counts, "out_counts.csv")
write.csv(out_values, "out_values.csv")
activeTB_3mo <- define_state(
cost = discount(TB_cost/2, d, first = TRUE),
utility = discount(QoL - 0.15*3, d, first = TRUE)
)
strat_3mo <- define_strategy(
transition = mat_trans,
noLTBI = noLTBI,
completeTx = completeTx,
incompleteTx = incompleteTx,
noTx = noTx,
activeTB = activeTB_3mo,
dead = dead
)
mod_psa <-
run_model(
init = 100 * init_states[1, ],
method = "end",
strat_6mo = strat_6mo,
strat_3mo = strat_3mo,
parameters = param,
cycles = 66,
cost = cost,
effect = utility
)
rsp <- define_psa(
TB_cost ~ gamma(mean = 4925.76, sd = sqrt(4925.76)),
pReact_comp ~ binomial(prob = 0.14, size = 10),
pReact_incomp ~ binomial(prob = 0.15301, size = 10),
pReact ~ binomial(prob = 0.09369, size = 10)
)
pm <- run_psa(
model = mod_psa,
psa = rsp,
N = 200
)
summary(pm)
get_counts(pm)
pm
gget_values(pm)
get_values(pm)
str(pm)
